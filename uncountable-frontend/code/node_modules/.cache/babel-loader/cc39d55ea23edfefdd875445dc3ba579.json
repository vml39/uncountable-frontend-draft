{"ast":null,"code":"var _jsxFileName = \"/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js\";\nimport React from 'react';\nimport dataset from '../assets/dataset.json';\nimport * as CanvasJSReact from '../assets/canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart; // import { CanvasJS, CanvasJSChart } from '../assets/canvasjs.react'\n// var CanvasJSReact = require('../assets/canvasjs.react');\n// var CanvasJS = CanvasJSReact.CanvasJS;\n// var CanvasJSChart = CanvasJSReact.CanvasJSChart;\n// import CanvasJS from 'canvasjs'\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataset: dataset,\n      inputs: [\"Polymer 1\", \"Polymer 2\", \"Polymer 3\", \"Polymer 4\", \"Carbon Black High Grade\", \"Carbon Black Low Grade\", \"Silica Filler 1\", \"Silica Filler 2\", \"Plasticizer 1\", \"Plasticizer 2\", \"Plasticizer 3\", \"Antioxidant\", \"Coloring Pigment\", \"Co-Agent 1\", \"Co-Agent 2\", \"Co-Agent 3\", \"Curing Agent 1\", \"Curing Agent 2\", \"Oven Temperature\"],\n      output: \"Output\",\n      title: \"Filler Title\",\n      axisX: {\n        title: \"Experiment\"\n      },\n      axisY: {\n        title: \"Amount of Inputs\"\n      },\n      toolTip: {\n        shared: true\n      },\n      dataPoints: [],\n      options: {}\n    };\n  }\n\n  updateOutput(output) {\n    this.setState({\n      output: output\n    });\n  }\n\n  updateTitle(output) {\n    console.log(\"updating title\");\n    let newTitle = output + \" Chart\";\n    this.setState({\n      title: newTitle\n    });\n  }\n\n  sortData(output) {// sort by descending based on the output for this \n  }\n\n  updateData(output) {\n    console.log(\"updating data\");\n    let dataFormat = {\n      type: \"stackedBar\",\n      name: \"Meals\",\n      // showInLegend: \"true\",\n      // xValueFormatString: \"DD, MMM\",\n      // yValueFormatString: \"$#,##0\",\n      dataPoints: [{}]\n    };\n    let newData = [{}];\n    this.setState({\n      data: [{\n        type: \"stackedBar\",\n        dataPoints: this.state.dataPoints\n      }]\n    });\n  }\n\n  updateOptions(output) {\n    this.updateOutput(output);\n    this.updateTitle(output);\n    this.updateData(output);\n    this.setState({\n      options: {\n        title: this.state.title,\n        axisX: this.state.axisX,\n        axisY: this.state.axisY,\n        toolTip: this.state.toolTip,\n        data: this.state.data\n      }\n    });\n  }\n\n  render() {\n    console.log(this.state.dataset);\n    return React.createElement(\"div\", {\n      className: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Viscosity\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Viscosity\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Cure Time\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Cure Time\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Elongation\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Elongation\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Tensile Strength\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Tensile Strength\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Compression Set\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Compression Set\"), React.createElement(CanvasJSChart, {\n      options: this.state.options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js"],"names":["React","dataset","CanvasJSReact","CanvasJS","CanvasJSChart","Chart","Component","constructor","props","state","inputs","output","title","axisX","axisY","toolTip","shared","dataPoints","options","updateOutput","setState","updateTitle","console","log","newTitle","sortData","updateData","dataFormat","type","name","newData","data","updateOptions","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dataset from '../assets/dataset.json';\nimport * as CanvasJSReact from '../assets/canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n// import { CanvasJS, CanvasJSChart } from '../assets/canvasjs.react'\n// var CanvasJSReact = require('../assets/canvasjs.react');\n// var CanvasJS = CanvasJSReact.CanvasJS;\n// var CanvasJSChart = CanvasJSReact.CanvasJSChart;\n// import CanvasJS from 'canvasjs'\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataset: dataset,\n      inputs: [\n        \"Polymer 1\",\n        \"Polymer 2\",\n         \"Polymer 3\",\n         \"Polymer 4\",\n         \"Carbon Black High Grade\",\n         \"Carbon Black Low Grade\",\n         \"Silica Filler 1\",\n         \"Silica Filler 2\",\n         \"Plasticizer 1\",\n         \"Plasticizer 2\",\n         \"Plasticizer 3\",\n         \"Antioxidant\",\n         \"Coloring Pigment\",\n         \"Co-Agent 1\",\n         \"Co-Agent 2\",\n         \"Co-Agent 3\",\n         \"Curing Agent 1\",\n         \"Curing Agent 2\",\n         \"Oven Temperature\"\n      ],\n      output: \"Output\",\n      title: \"Filler Title\",\n      axisX: {\n        title: \"Experiment\"\n      },\n      axisY: {\n        title: \"Amount of Inputs\"\n      }, \n      toolTip: {\n        shared: true\n      },\n      dataPoints: [],\n      options: {}\n    };\n  }\n\n  updateOutput(output) {\n    this.setState({ output: output });\n  }\n\n  updateTitle(output) {\n    console.log(\"updating title\");\n    let newTitle = output + \" Chart\";\n    this.setState({title: newTitle});\n  }\n\n  sortData(output) {\n    // sort by descending based on the output for this \n  }\n\n  updateData(output) {\n    console.log(\"updating data\");\n    let dataFormat = {\n      type: \"stackedBar\",\n      name: \"Meals\",\n      // showInLegend: \"true\",\n      // xValueFormatString: \"DD, MMM\",\n      // yValueFormatString: \"$#,##0\",\n      dataPoints: [\n        {}\n      ]\n    }\n    let newData = [{\n\n    }]\n    this.setState({data: [{\n      type: \"stackedBar\",\n      dataPoints: this.state.dataPoints\n    }]})\n  }\n\n  updateOptions(output) {\n    this.updateOutput(output);\n    this.updateTitle(output);\n    this.updateData(output);\n    this.setState({ \n      options: {\n        title: this.state.title,\n        axisX: this.state.axisX,\n        axisY: this.state.axisY,\n        toolTip: this.state.toolTip,\n        data: this.state.data\n      } \n    })\n  }\n\n  render() {\n    console.log(this.state.dataset);\n    return (\n      <div className=\"chart\">\n        <button onClick={() => this.updateOptions(\"Viscosity\")}>Viscosity</button>\n        <button onClick={() => this.updateOptions(\"Cure Time\")}>Cure Time</button>\n        <button onClick={() => this.updateOptions(\"Elongation\")}>Elongation</button>\n        <button onClick={() => this.updateOptions(\"Tensile Strength\")}>Tensile Strength</button>\n        <button onClick={() => this.updateOptions(\"Compression Set\")}>Compression Set</button>\n        <CanvasJSChart options = { this.state.options } />\n      </div>\n    )\n  }\n}\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}