{"ast":null,"code":"var _jsxFileName = \"/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js\";\nimport React from 'react';\nimport dataset from '../assets/dataset.json';\nimport * as CanvasJSReact from '../assets/canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nconst inputs = [\"Polymer 1\", \"Polymer 2\", \"Polymer 3\", \"Polymer 4\", \"Carbon Black High Grade\", \"Carbon Black Low Grade\", \"Silica Filler 1\", \"Silica Filler 2\", \"Plasticizer 1\", \"Plasticizer 2\", \"Plasticizer 3\", \"Antioxidant\", \"Coloring Pigment\", \"Co-Agent 1\", \"Co-Agent 2\", \"Co-Agent 3\", \"Curing Agent 1\", \"Curing Agent 2\", \"Oven Temperature\"];\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {}\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  updateTitle(output) {\n    return output + \" Chart\";\n  }\n\n  compare(a, b) {\n    return b[1] - a[1];\n  }\n\n  sortData(output) {\n    let sorted = [];\n\n    for (let exp in dataset) {\n      sorted.push([exp, dataset[exp][\"outputs\"][output]]);\n    }\n\n    sorted.sort(this.compare);\n    console.log(\"sortData\", sorted);\n    return sorted;\n  }\n\n  getExpName(exp) {}\n\n  createDataPoints(input, output) {\n    let sortedDataPoints = [];\n    let i = 0;\n\n    for (let exp of this.sortData(output)) {\n      sortedDataPoints.push({\n        label: exp[0],\n        x: i,\n        y: dataset[exp[0]][\"inputs\"][input]\n      });\n      i++;\n    }\n\n    console.log(\"createDataPoints\", sortedDataPoints);\n    return {\n      type: \"stackedBar\",\n      name: input,\n      showInLegend: \"true\",\n      dataPoints: sortedDataPoints\n    };\n  }\n\n  updateData(output) {\n    console.log(\"updating data\");\n    let newData = [];\n\n    for (let input of inputs) {\n      newData.push(this.createDataPoints(input, output));\n    }\n\n    console.log(\"updateData\", newData);\n    this.setState({\n      data: newData\n    });\n    return newData;\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  updateOptions(output) {\n    let newTitle = this.updateTitle(output);\n    let newData = this.updateData(output);\n    this.setState({\n      options: {\n        animationEnabled: true,\n        exportEnabled: true,\n        theme: \"light2\",\n        height: 650,\n        title: {\n          text: newTitle,\n          fontSize: 36\n        },\n        axisX: {\n          title: \"Experiment\",\n          titleFontSize: 24,\n          labelFontSize: 12\n        },\n        axisY: {\n          title: \"Amount of Inputs\",\n          titleFontSize: 24,\n          labelFontSize: 12\n        },\n        toolTip: {\n          shared: true\n        },\n        legend: {\n          cursor: \"pointer\",\n          fontSize: 12,\n          itemclick: this.toggleDataSeries\n        },\n        data: newData\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.updateOptions(\"Viscosity\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Viscosity\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Viscosity\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Cure Time\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Cure Time\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Elongation\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Elongation\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Tensile Strength\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Tensile Strength\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Compression Set\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Compression Set\"), React.createElement(\"div\", {\n      id: \"chartContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(CanvasJSChart, {\n      options: this.state.options,\n      onRef: ref => this.chart = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js"],"names":["React","dataset","CanvasJSReact","CanvasJS","CanvasJSChart","inputs","Chart","Component","constructor","props","state","options","toggleDataSeries","bind","updateTitle","output","compare","a","b","sortData","sorted","exp","push","sort","console","log","getExpName","createDataPoints","input","sortedDataPoints","i","label","x","y","type","name","showInLegend","dataPoints","updateData","newData","setState","data","e","dataSeries","visible","chart","render","updateOptions","newTitle","animationEnabled","exportEnabled","theme","height","title","text","fontSize","axisX","titleFontSize","labelFontSize","axisY","toolTip","shared","legend","cursor","itemclick","componentDidMount","ref"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dataset from '../assets/dataset.json';\nimport * as CanvasJSReact from '../assets/canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nconst inputs = [\n  \"Polymer 1\",\n  \"Polymer 2\",\n  \"Polymer 3\",\n  \"Polymer 4\",\n  \"Carbon Black High Grade\",\n  \"Carbon Black Low Grade\",\n  \"Silica Filler 1\",\n  \"Silica Filler 2\",\n  \"Plasticizer 1\",\n  \"Plasticizer 2\",\n  \"Plasticizer 3\",\n  \"Antioxidant\",\n  \"Coloring Pigment\",\n  \"Co-Agent 1\",\n  \"Co-Agent 2\",\n  \"Co-Agent 3\",\n  \"Curing Agent 1\",\n  \"Curing Agent 2\",\n  \"Oven Temperature\"\n]\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {}\n    };\n\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  updateTitle(output) {\n    return output + \" Chart\";\n  }\n\n  compare(a, b) {\n    return b[1] - a[1];\n  }\n\n  sortData(output) {\n    let sorted = [];\n    for (let exp in dataset) {\n      sorted.push([exp, dataset[exp][\"outputs\"][output]]);\n    }\n    sorted.sort(this.compare);\n    console.log(\"sortData\", sorted);\n    return sorted;\n  }\n\n  getExpName(exp) {\n\n  }\n\n  createDataPoints(input, output) {\n    let sortedDataPoints = [];\n    let i = 0;\n    for (let exp of this.sortData(output)) {\n      sortedDataPoints.push({\n        label: exp[0],\n        x: i,\n        y: dataset[exp[0]][\"inputs\"][input]\n      })\n      i++;\n    }\n    console.log(\"createDataPoints\", sortedDataPoints)\n    return {\n      type: \"stackedBar\",\n      name: input,\n      showInLegend: \"true\",\n      dataPoints: sortedDataPoints\n    };\n  }\n\n  updateData(output) {\n    console.log(\"updating data\");\n    let newData = [];\n    for (let input of inputs) {\n      newData.push(this.createDataPoints(input, output));\n    }\n    console.log(\"updateData\", newData);\n    this.setState({ data: newData });\n\n    return newData;\n  }\n\n  toggleDataSeries(e) {\n\t\tif(typeof(e.dataSeries.visible) === \"undefined\" || e.dataSeries.visible) {\n\t\t\te.dataSeries.visible = false;\n\t\t}\n\t\telse {\n\t\t\te.dataSeries.visible = true;\n\t\t}\n\t\tthis.chart.render();\n\t}\n\n  updateOptions(output) {\n    let newTitle = this.updateTitle(output);\n    let newData = this.updateData(output);\n    this.setState({ \n      options: {\n        animationEnabled: true,\n        exportEnabled: true,\n        theme: \"light2\",\n        height: 650,\n        title: {\n          text: newTitle,\n          fontSize: 36,\n        },\n        axisX: {\n          title: \"Experiment\",\n          titleFontSize: 24,\n          labelFontSize: 12,\n        },\n        axisY: {\n          title: \"Amount of Inputs\",\n          titleFontSize: 24,\n          labelFontSize: 12,\n        }, \n        toolTip: {\n          shared: true\n        },\n        legend:{\n          cursor: \"pointer\",\n          fontSize: 12,\n          itemclick: this.toggleDataSeries\n        },\n        data: newData\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.updateOptions(\"Viscosity\");\n  }\n\n  render() {\n    return (\n      <div className=\"chart\">\n        <button onClick={() => this.updateOptions(\"Viscosity\")}>Viscosity</button>\n        <button onClick={() => this.updateOptions(\"Cure Time\")}>Cure Time</button>\n        <button onClick={() => this.updateOptions(\"Elongation\")}>Elongation</button>\n        <button onClick={() => this.updateOptions(\"Tensile Strength\")}>Tensile Strength</button>\n        <button onClick={() => this.updateOptions(\"Compression Set\")}>Compression Set</button>\n        <div id=\"chartContainer\">\n          <CanvasJSChart options={ this.state.options } onRef={ref => this.chart = ref} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}