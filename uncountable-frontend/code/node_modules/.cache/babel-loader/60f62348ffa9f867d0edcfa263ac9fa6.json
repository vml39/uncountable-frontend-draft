{"ast":null,"code":"var _jsxFileName = \"/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js\";\nimport React from 'react';\nimport dataset from '../assets/dataset.json';\nimport CanvasJSChart from '../assets/canvasjs.react'; // var CanvasJS = CanvasJSReact.CanvasJS;\n// var CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nconst inputs = [\"Polymer 1\", \"Polymer 2\", \"Polymer 3\", \"Polymer 4\", \"Carbon Black High Grade\", \"Carbon Black Low Grade\", \"Silica Filler 1\", \"Silica Filler 2\", \"Plasticizer 1\", \"Plasticizer 2\", \"Plasticizer 3\", \"Antioxidant\", \"Coloring Pigment\", \"Co-Agent 1\", \"Co-Agent 2\", \"Co-Agent 3\", \"Curing Agent 1\", \"Curing Agent 2\" // Oven Temperature included in the tooltip but not in the stacked bar chart\n];\nlet indexCount = 0;\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      options: {},\n      indexLabelCount: 0\n    };\n  }\n\n  updateTitle(output) {\n    let newTitle = output + \" Chart\";\n    this.setState({\n      title: newTitle\n    });\n  }\n\n  compare(a, b) {\n    return b[1] - a[1];\n  }\n\n  sortData(output) {\n    let sorted = [];\n\n    for (let exp in dataset) {\n      sorted.push([exp, dataset[exp][\"outputs\"][output]]);\n    }\n\n    sorted.sort(this.compare);\n    return sorted;\n  }\n\n  createIndexLabel(e, output) {\n    let idx = (inputs.length - 1) * Object.keys(dataset).length;\n\n    if (indexCount < idx) {\n      indexCount++;\n      return \"\";\n    } else {\n      indexCount++;\n      let label = e.dataPoint.label;\n      return dataset[label][\"outputs\"][output];\n    }\n  }\n\n  createDataPoints(input, output, sorted) {\n    let sortedDataPoints = [];\n\n    for (let exp of sorted) {\n      sortedDataPoints.push({\n        label: exp[0],\n        y: dataset[exp[0]][\"inputs\"][input]\n      });\n    }\n\n    return {\n      type: \"stackedBar\",\n      name: input,\n      showInLegend: \"true\",\n      indexLabelFormatter: e => {\n        return this.createIndexLabel(e, output);\n      },\n      indexLabelPlacement: \"outside\",\n      indexLabelOrientation: \"horizontal\",\n      indexLabelFontSize: 12,\n      dataPoints: sortedDataPoints\n    };\n  }\n\n  updateData(output) {\n    let newData = [];\n    let sorted = this.sortData(output);\n\n    for (let input of inputs) {\n      newData.push(this.createDataPoints(input, output, sorted));\n    }\n\n    this.setState({\n      data: newData\n    });\n    return newData;\n  }\n\n  updateOptions(output) {\n    this.updateTitle(output);\n    let newData = this.updateData(output);\n    indexCount = 0;\n    this.setState({\n      options: {\n        animationEnabled: true,\n        exportEnabled: true,\n        theme: \"light2\",\n        height: 600,\n        axisX: {\n          title: \"Experiment\",\n          titleFontSize: 24,\n          labelFontSize: 12,\n          labelFormatter: e => {\n            if (e.label) {\n              return e.label.substring(e.label.indexOf(\"EXP\"));\n            } else {\n              return e.label;\n            }\n          },\n          interval: 1\n        },\n        axisY: {\n          title: \"Amount of Inputs\",\n          titleFontSize: 24,\n          labelFontSize: 12\n        },\n        toolTip: {\n          shared: true,\n          contentFormatter: e => {\n            let exp = e.entries[0].dataPoint.label;\n            let content = \"<i>\" + exp + \"</i>\" + \"<br/>\";\n\n            for (let i = 0; i < e.entries.length; i++) {\n              content += e.entries[i].dataSeries.name + \": \" + \"<strong>\" + e.entries[i].dataPoint.y + \"</strong>\";\n              content += \"<br/>\";\n            }\n\n            content += \"Oven Temperature: <strong>\" + dataset[exp][\"inputs\"][\"Oven Temperature\"] + \"</strong>\";\n            return content;\n          }\n        },\n        legend: {\n          cursor: \"pointer\",\n          fontSize: 12\n        },\n        data: newData\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.updateOptions(\"Viscosity\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.state.title)), React.createElement(\"div\", {\n      className: \"inputs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Viscosity\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Viscosity\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Cure Time\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Cure Time\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Elongation\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Elongation\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Tensile Strength\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Tensile Strength\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Compression Set\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Compression Set\")), React.createElement(\"div\", {\n      id: \"chartContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(CanvasJSChart, {\n      options: this.state.options,\n      onRef: ref => this.chart = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js"],"names":["React","dataset","CanvasJSChart","inputs","indexCount","Chart","Component","constructor","props","state","title","options","indexLabelCount","updateTitle","output","newTitle","setState","compare","a","b","sortData","sorted","exp","push","sort","createIndexLabel","e","idx","length","Object","keys","label","dataPoint","createDataPoints","input","sortedDataPoints","y","type","name","showInLegend","indexLabelFormatter","indexLabelPlacement","indexLabelOrientation","indexLabelFontSize","dataPoints","updateData","newData","data","updateOptions","animationEnabled","exportEnabled","theme","height","axisX","titleFontSize","labelFontSize","labelFormatter","substring","indexOf","interval","axisY","toolTip","shared","contentFormatter","entries","content","i","dataSeries","legend","cursor","fontSize","componentDidMount","render","ref","chart"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dataset from '../assets/dataset.json';\nimport CanvasJSChart from '../assets/canvasjs.react';\n// var CanvasJS = CanvasJSReact.CanvasJS;\n// var CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nconst inputs = [\n  \"Polymer 1\",\n  \"Polymer 2\",\n  \"Polymer 3\",\n  \"Polymer 4\",\n  \"Carbon Black High Grade\",\n  \"Carbon Black Low Grade\",\n  \"Silica Filler 1\",\n  \"Silica Filler 2\",\n  \"Plasticizer 1\",\n  \"Plasticizer 2\",\n  \"Plasticizer 3\",\n  \"Antioxidant\",\n  \"Coloring Pigment\",\n  \"Co-Agent 1\",\n  \"Co-Agent 2\",\n  \"Co-Agent 3\",\n  \"Curing Agent 1\",\n  \"Curing Agent 2\",\n  // Oven Temperature included in the tooltip but not in the stacked bar chart\n]\n\nlet indexCount = 0;\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      options: {},\n      indexLabelCount: 0\n    };\n  }\n\n  updateTitle(output) {\n    let newTitle = output + \" Chart\";\n    this.setState({ title: newTitle });\n  }\n\n  compare(a, b) {\n    return b[1] - a[1];\n  }\n\n  sortData(output) {\n    let sorted = [];\n    for (let exp in dataset) {\n      sorted.push([exp, dataset[exp][\"outputs\"][output]]);\n    }\n    sorted.sort(this.compare);\n    return sorted;\n  }\n\n  createIndexLabel(e, output) {\n    let idx = (inputs.length - 1) * (Object.keys(dataset).length);\n    if (indexCount < idx) {\n      indexCount++;\n      return \"\";\n    } else {\n      indexCount++;\n      let label = e.dataPoint.label;\n      return dataset[label][\"outputs\"][output];\n    }\n  }\n\n  createDataPoints(input, output, sorted) {\n    let sortedDataPoints = [];\n    for (let exp of sorted) {\n      sortedDataPoints.push({\n        label: exp[0],\n        y: dataset[exp[0]][\"inputs\"][input]\n      })\n    }\n    return {\n      type: \"stackedBar\",\n      name: input,\n      showInLegend: \"true\",\n      indexLabelFormatter: e => {\n        return this.createIndexLabel(e, output);\n      },\n      indexLabelPlacement: \"outside\",  \n      indexLabelOrientation: \"horizontal\",\n      indexLabelFontSize: 12,\n      dataPoints: sortedDataPoints\n    };\n  }\n\n  updateData(output) {\n    let newData = [];\n    let sorted = this.sortData(output);\n    for (let input of inputs) {\n      newData.push(this.createDataPoints(input, output, sorted));\n    }\n    this.setState({ data: newData });\n\n    return newData;\n  }\n\n  updateOptions(output) {\n    this.updateTitle(output);\n    let newData = this.updateData(output);\n    indexCount = 0;\n    this.setState({ \n      options: {\n        animationEnabled: true,\n        exportEnabled: true,\n        theme: \"light2\",\n        height: 600,\n        axisX: {\n          title: \"Experiment\",\n          titleFontSize: 24,\n          labelFontSize: 12,\n          labelFormatter: e => {\n            if (e.label) {\n              return e.label.substring(e.label.indexOf(\"EXP\"));\n            } else {\n              return e.label;\n            }\n          },\n          interval: 1,\n        },\n        axisY: {\n          title: \"Amount of Inputs\",\n          titleFontSize: 24,\n          labelFontSize: 12,\n        }, \n        toolTip: {\n          shared: true,\n          contentFormatter: e => {\n            let exp = e.entries[0].dataPoint.label;\n            let content = \"<i>\" + exp + \"</i>\" + \"<br/>\";\n            for (let i = 0; i < e.entries.length; i++) {\n              content += e.entries[i].dataSeries.name + \": \" + \"<strong>\" + e.entries[i].dataPoint.y + \"</strong>\";\n              content += \"<br/>\";\n            }\n            content += \"Oven Temperature: <strong>\" + dataset[exp][\"inputs\"][\"Oven Temperature\"] + \"</strong>\";\n            return content;\n          }\n        },\n        legend:{\n          cursor: \"pointer\",\n          fontSize: 12,\n        },\n        data: newData\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.updateOptions(\"Viscosity\");\n  }\n\n  render() {\n    return (\n      <div className=\"chart\">\n        <header>\n          <h1>{ this.state.title }</h1>\n        </header>\n        <div className=\"inputs\">\n          <button onClick={() => this.updateOptions(\"Viscosity\")}>Viscosity</button>\n          <button onClick={() => this.updateOptions(\"Cure Time\")}>Cure Time</button>\n          <button onClick={() => this.updateOptions(\"Elongation\")}>Elongation</button>\n          <button onClick={() => this.updateOptions(\"Tensile Strength\")}>Tensile Strength</button>\n          <button onClick={() => this.updateOptions(\"Compression Set\")}>Compression Set</button>\n        </div>\n        <div id=\"chartContainer\">\n          <CanvasJSChart options={ this.state.options } onRef={ref => this.chart = ref} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}