{"ast":null,"code":"var _jsxFileName = \"/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js\";\nimport React from 'react';\nimport dataset from '../assets/dataset.json';\nimport * as CanvasJSReact from '../assets/canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataset: dataset,\n      inputs: [\"Polymer 1\", \"Polymer 2\", \"Polymer 3\", \"Polymer 4\", \"Carbon Black High Grade\", \"Carbon Black Low Grade\", \"Silica Filler 1\", \"Silica Filler 2\", \"Plasticizer 1\", \"Plasticizer 2\", \"Plasticizer 3\", \"Antioxidant\", \"Coloring Pigment\", \"Co-Agent 1\", \"Co-Agent 2\", \"Co-Agent 3\", \"Curing Agent 1\", \"Curing Agent 2\" // \"Oven Temperature\"\n      ],\n      title: \"Filler Title\",\n      axisX: {\n        title: \"Experiment\",\n        prefix: \"$\"\n      },\n      axisY: {\n        title: \"Amount of Inputs\",\n        prefix: \"$\"\n      },\n      toolTip: {\n        shared: true\n      },\n      data: [],\n      options: {}\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  updateTitle(output) {\n    return output + \" Chart\";\n  }\n\n  compare(a, b) {\n    return b[1] - a[1];\n  }\n\n  sortData(output) {\n    let sorted = [];\n\n    for (let exp in this.state.dataset) {\n      sorted.push([exp, this.state.dataset[exp][\"outputs\"][output]]);\n    }\n\n    sorted.sort(this.compare);\n    console.log(\"sortData\", sorted);\n    return sorted;\n  }\n\n  createDataPoints(input, output) {\n    let sortedDataPoints = [];\n\n    for (let exp of this.sortData(output)) {\n      sortedDataPoints.push({\n        x: exp[0],\n        y: this.state.dataset[exp[0]][\"inputs\"][input]\n      });\n    }\n\n    console.log(\"createDataPoints\", sortedDataPoints);\n    return {\n      type: \"stackedBar\",\n      name: input,\n      showInLegend: \"true\",\n      xValueFormatString: \"$#,##0\",\n      yValueFormatString: \"$#,##0\",\n      dataPoints: sortedDataPoints\n    };\n  }\n\n  updateData(output) {\n    console.log(\"updating data\");\n    let newData = [];\n\n    for (let input of this.state.inputs) {\n      newData.push(this.createDataPoints(input, output));\n    }\n\n    console.log(\"updateData\", newData);\n    this.setState({\n      data: newData\n    });\n    return newData;\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  updateOptions(output) {\n    let newTitle = this.updateTitle(output);\n    let newData = this.updateData(output);\n    this.setState({\n      options: {\n        animationEnabled: true,\n        theme: \"light2\",\n        title: {\n          text: newTitle\n        },\n        axisX: {\n          title: \"Experiment\",\n          prefix: \"$\"\n        },\n        axisY: {\n          title: \"Amount of Inputs\",\n          prefix: \"$\"\n        },\n        toolTip: {\n          shared: true\n        },\n        legend: {\n          cursor: \"pointer\",\n          itemclick: this.toggleDataSeries\n        },\n        // data: newData\n        // } \n        // options: {\n        //   animationEnabled: true,\n        //   theme: \"light2\",\n        //   title:{\n        //     text: \"Evening Sales in a Restaurant\"\n        //   },\n        //   axisX: {\n        //     valueFormatString: \"DDD\"\n        //   },\n        //   axisY: {\n        //     prefix: \"$\"\n        //   },\n        //   toolTip: {\n        //     shared: true\n        //   },\n        //   legend:{\n        //     cursor: \"pointer\",\n        //     itemclick: this.toggleDataSeries\n        //   },\n        data: [{\n          type: \"stackedBar\",\n          name: \"Meals\",\n          showInLegend: \"true\",\n          xValueFormatString: \"DD, MMM\",\n          yValueFormatString: \"$#,##0\",\n          dataPoints: [{\n            x: \"20170111_EXP_12\",\n            y: 1\n          }, {\n            x: \"20170111_EXP_12\",\n            y: 1\n          }, {\n            x: \"20170111_EXP_12\",\n            y: 1\n          }, {\n            x: \"20170111_EXP_12\",\n            y: 1\n          }, {\n            x: \"20170111_EXP_12\",\n            y: 1\n          }, {\n            x: \"20170111_EXP_12\",\n            y: 1\n          }] // },\n          // {\n          //   type: \"stackedBar\",\n          //   name: \"Snacks\",\n          //   showInLegend: \"true\",\n          //   xValueFormatString: \"DD, MMM\",\n          //   yValueFormatString: \"$#,##0\",\n          //   dataPoints: [\n          //     { x: new Date(2018, 5, 25), y: 86 },\n          //     { x: new Date(2018, 5, 26), y: 95 },\n          //     { x: new Date(2018, 5, 27), y: 71 },\n          //     { x: new Date(2018, 5, 28), y: 58 },\n          //     { x: new Date(2018, 5, 29), y: 60 },\n          //     { x: new Date(2018, 5, 30), y: 65 },\n          //     { x: new Date(2018, 6, 1), y: 89 }\n          //   ]\n          // },\n          // {\n          //   type: \"stackedBar\",\n          //   name: \"Drinks\",\n          //   showInLegend: \"true\",\n          //   xValueFormatString: \"DD, MMM\",\n          //   yValueFormatString: \"$#,##0\",\n          //   dataPoints: [\n          //     { x: new Date(2018, 5, 25), y: 48 },\n          //     { x: new Date(2018, 5, 26), y: 45 },\n          //     { x: new Date(2018, 5, 27), y: 41 },\n          //     { x: new Date(2018, 5, 28), y: 55 },\n          //     { x: new Date(2018, 5, 29), y: 80 },\n          //     { x: new Date(2018, 5, 30), y: 85 },\n          //     { x: new Date(2018, 6, 1), y: 83 }\n          //   ]\n          // },\n          // {\n          //   type: \"stackedBar\",\n          //   name: \"Dessert\",\n          //   showInLegend: \"true\",\n          //   xValueFormatString: \"DD, MMM\",\n          //   yValueFormatString: \"$#,##0\",\n          //   dataPoints: [\n          //     { x: new Date(2018, 5, 25), y: 61 },\n          //     { x: new Date(2018, 5, 26), y: 55 },\n          //     { x: new Date(2018, 5, 27), y: 61 },\n          //     { x: new Date(2018, 5, 28), y: 75 },\n          //     { x: new Date(2018, 5, 29), y: 80 },\n          //     { x: new Date(2018, 5, 30), y: 85 },\n          //     { x: new Date(2018, 6, 1), y: 105 }\n          //   ]\n          // },\n          // {\n          //   type: \"stackedBar\",\n          //   name: \"Takeaway\",\n          //   showInLegend: \"true\",\n          //   xValueFormatString: \"DD, MMM\",\n          //   yValueFormatString: \"$#,##0\",\n          //   dataPoints: [\n          //     { x: new Date(2018, 5, 25), y: 52 },\n          //     { x: new Date(2018, 5, 26), y: 55 },\n          //     { x: new Date(2018, 5, 27), y: 20 },\n          //     { x: new Date(2018, 5, 28), y: 35 },\n          //     { x: new Date(2018, 5, 29), y: 30 },\n          //     { x: new Date(2018, 5, 30), y: 45 },\n          //     { x: new Date(2018, 6, 1), y: 25 }\n          //   ]\n\n        }]\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"options\", this.state.options);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Viscosity\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"Viscosity\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Cure Time\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Cure Time\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Elongation\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Elongation\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Tensile Strength\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Tensile Strength\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Compression Set\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, \"Compression Set\"), React.createElement(CanvasJSChart, {\n      options: this.state.options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js"],"names":["React","dataset","CanvasJSReact","CanvasJS","CanvasJSChart","Chart","Component","constructor","props","state","inputs","title","axisX","prefix","axisY","toolTip","shared","data","options","toggleDataSeries","bind","updateTitle","output","compare","a","b","sortData","sorted","exp","push","sort","console","log","createDataPoints","input","sortedDataPoints","x","y","type","name","showInLegend","xValueFormatString","yValueFormatString","dataPoints","updateData","newData","setState","e","dataSeries","visible","chart","render","updateOptions","newTitle","animationEnabled","theme","text","legend","cursor","itemclick","componentDidUpdate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAO,KAAKC,aAAZ,MAA+B,0BAA/B;AACA,IAAIC,QAAQ,GAAGD,aAAa,CAACC,QAA7B;AACA,IAAIC,aAAa,GAAGF,aAAa,CAACE,aAAlC;;AAEA,MAAMC,KAAN,SAAoBL,KAAK,CAACM,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXR,MAAAA,OAAO,EAAEA,OADE;AAEXS,MAAAA,MAAM,EAAE,CACN,WADM,EAEN,WAFM,EAGN,WAHM,EAIN,WAJM,EAKN,yBALM,EAMN,wBANM,EAON,iBAPM,EAQN,iBARM,EASN,eATM,EAUN,eAVM,EAWN,eAXM,EAYN,aAZM,EAaN,kBAbM,EAcN,YAdM,EAeN,YAfM,EAgBN,YAhBM,EAiBN,gBAjBM,EAkBN,gBAlBM,CAmBN;AAnBM,OAFG;AAuBXC,MAAAA,KAAK,EAAE,cAvBI;AAwBXC,MAAAA,KAAK,EAAE;AACLD,QAAAA,KAAK,EAAE,YADF;AAELE,QAAAA,MAAM,EAAE;AAFH,OAxBI;AA4BXC,MAAAA,KAAK,EAAE;AACLH,QAAAA,KAAK,EAAE,kBADF;AAELE,QAAAA,MAAM,EAAE;AAFH,OA5BI;AAgCXE,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE;AADD,OAhCE;AAmCXC,MAAAA,IAAI,EAAE,EAnCK;AAoCXC,MAAAA,OAAO,EAAE;AApCE,KAAb;AAuCA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AAEDC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,WAAOA,MAAM,GAAG,QAAhB;AACD;;AAEDC,EAAAA,OAAO,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACZ,WAAOA,CAAC,CAAC,CAAD,CAAD,GAAOD,CAAC,CAAC,CAAD,CAAf;AACD;;AAEDE,EAAAA,QAAQ,CAACJ,MAAD,EAAS;AACf,QAAIK,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAKnB,KAAL,CAAWR,OAA3B,EAAoC;AAClC0B,MAAAA,MAAM,CAACE,IAAP,CAAY,CAACD,GAAD,EAAM,KAAKnB,KAAL,CAAWR,OAAX,CAAmB2B,GAAnB,EAAwB,SAAxB,EAAmCN,MAAnC,CAAN,CAAZ;AACD;;AACDK,IAAAA,MAAM,CAACG,IAAP,CAAY,KAAKP,OAAjB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,MAAxB;AACA,WAAOA,MAAP;AACD;;AAEDM,EAAAA,gBAAgB,CAACC,KAAD,EAAQZ,MAAR,EAAgB;AAC9B,QAAIa,gBAAgB,GAAG,EAAvB;;AACA,SAAK,IAAIP,GAAT,IAAgB,KAAKF,QAAL,CAAcJ,MAAd,CAAhB,EAAuC;AACrCa,MAAAA,gBAAgB,CAACN,IAAjB,CAAsB;AACpBO,QAAAA,CAAC,EAAER,GAAG,CAAC,CAAD,CADc;AAEpBS,QAAAA,CAAC,EAAE,KAAK5B,KAAL,CAAWR,OAAX,CAAmB2B,GAAG,CAAC,CAAD,CAAtB,EAA2B,QAA3B,EAAqCM,KAArC;AAFiB,OAAtB;AAID;;AACDH,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCG,gBAAhC;AACA,WAAO;AACLG,MAAAA,IAAI,EAAE,YADD;AAELC,MAAAA,IAAI,EAAEL,KAFD;AAGLM,MAAAA,YAAY,EAAE,MAHT;AAILC,MAAAA,kBAAkB,EAAE,QAJf;AAKLC,MAAAA,kBAAkB,EAAE,QALf;AAMLC,MAAAA,UAAU,EAAER;AANP,KAAP;AAQD;;AAEDS,EAAAA,UAAU,CAACtB,MAAD,EAAS;AACjBS,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAIa,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIX,KAAT,IAAkB,KAAKzB,KAAL,CAAWC,MAA7B,EAAqC;AACnCmC,MAAAA,OAAO,CAAChB,IAAR,CAAa,KAAKI,gBAAL,CAAsBC,KAAtB,EAA6BZ,MAA7B,CAAb;AACD;;AACDS,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0Ba,OAA1B;AACA,SAAKC,QAAL,CAAc;AAAE7B,MAAAA,IAAI,EAAE4B;AAAR,KAAd;AAEA,WAAOA,OAAP;AACD;;AAED1B,EAAAA,gBAAgB,CAAC4B,CAAD,EAAI;AACpB,QAAG,OAAOA,CAAC,CAACC,UAAF,CAAaC,OAApB,KAAiC,WAAjC,IAAgDF,CAAC,CAACC,UAAF,CAAaC,OAAhE,EAAyE;AACxEF,MAAAA,CAAC,CAACC,UAAF,CAAaC,OAAb,GAAuB,KAAvB;AACA,KAFD,MAGK;AACJF,MAAAA,CAAC,CAACC,UAAF,CAAaC,OAAb,GAAuB,IAAvB;AACA;;AACD,SAAKC,KAAL,CAAWC,MAAX;AACA;;AAEAC,EAAAA,aAAa,CAAC9B,MAAD,EAAS;AACpB,QAAI+B,QAAQ,GAAG,KAAKhC,WAAL,CAAiBC,MAAjB,CAAf;AACA,QAAIuB,OAAO,GAAG,KAAKD,UAAL,CAAgBtB,MAAhB,CAAd;AACA,SAAKwB,QAAL,CAAc;AACZ5B,MAAAA,OAAO,EAAE;AACPoC,QAAAA,gBAAgB,EAAE,IADX;AAEVC,QAAAA,KAAK,EAAE,QAFG;AAGP5C,QAAAA,KAAK,EAAE;AACL6C,UAAAA,IAAI,EAAEH;AADD,SAHA;AAMPzC,QAAAA,KAAK,EAAE;AACLD,UAAAA,KAAK,EAAE,YADF;AAELE,UAAAA,MAAM,EAAE;AAFH,SANA;AAUPC,QAAAA,KAAK,EAAE;AACLH,UAAAA,KAAK,EAAE,kBADF;AAELE,UAAAA,MAAM,EAAE;AAFH,SAVA;AAcPE,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AADD,SAdF;AAiBPyC,QAAAA,MAAM,EAAC;AACLC,UAAAA,MAAM,EAAE,SADH;AAELC,UAAAA,SAAS,EAAE,KAAKxC;AAFX,SAjBA;AAqBP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEF,QAAAA,IAAI,EAAE,CAAC;AACLqB,UAAAA,IAAI,EAAE,YADD;AAELC,UAAAA,IAAI,EAAE,OAFD;AAGLC,UAAAA,YAAY,EAAE,MAHT;AAILC,UAAAA,kBAAkB,EAAE,SAJf;AAKLC,UAAAA,kBAAkB,EAAE,QALf;AAMLC,UAAAA,UAAU,EAAE,CACV;AAAEP,YAAAA,CAAC,EAAE,iBAAL;AAAwBC,YAAAA,CAAC,EAAE;AAA3B,WADU,EAEV;AAAED,YAAAA,CAAC,EAAE,iBAAL;AAAwBC,YAAAA,CAAC,EAAE;AAA3B,WAFU,EAGV;AAAED,YAAAA,CAAC,EAAE,iBAAL;AAAwBC,YAAAA,CAAC,EAAE;AAA3B,WAHU,EAIV;AAAED,YAAAA,CAAC,EAAE,iBAAL;AAAwBC,YAAAA,CAAC,EAAE;AAA3B,WAJU,EAKV;AAAED,YAAAA,CAAC,EAAE,iBAAL;AAAwBC,YAAAA,CAAC,EAAE;AAA3B,WALU,EAMV;AAAED,YAAAA,CAAC,EAAE,iBAAL;AAAwBC,YAAAA,CAAC,EAAE;AAA3B,WANU,CANP,CAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA7EO,SAAD;AA1CC;AADG,KAAd;AA4HD;;AAEDuB,EAAAA,kBAAkB,GAAG;AACnB7B,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKvB,KAAL,CAAWS,OAAlC;AACD;;AAEDiC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKC,aAAL,CAAmB,WAAnB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKA,aAAL,CAAmB,WAAnB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,EAGE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKA,aAAL,CAAmB,YAAnB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,EAIE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKA,aAAL,CAAmB,kBAAnB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJF,EAKE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKA,aAAL,CAAmB,iBAAnB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBALF,EAME,oBAAC,aAAD;AAAe,MAAA,OAAO,EAAK,KAAK3C,KAAL,CAAWS,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAUD;;AAxPiC;;AA2PpC,eAAeb,KAAf","sourcesContent":["import React from 'react';\nimport dataset from '../assets/dataset.json';\nimport * as CanvasJSReact from '../assets/canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataset: dataset,\n      inputs: [\n        \"Polymer 1\",\n        \"Polymer 2\",\n        \"Polymer 3\",\n        \"Polymer 4\",\n        \"Carbon Black High Grade\",\n        \"Carbon Black Low Grade\",\n        \"Silica Filler 1\",\n        \"Silica Filler 2\",\n        \"Plasticizer 1\",\n        \"Plasticizer 2\",\n        \"Plasticizer 3\",\n        \"Antioxidant\",\n        \"Coloring Pigment\",\n        \"Co-Agent 1\",\n        \"Co-Agent 2\",\n        \"Co-Agent 3\",\n        \"Curing Agent 1\",\n        \"Curing Agent 2\",\n        // \"Oven Temperature\"\n      ],\n      title: \"Filler Title\",\n      axisX: {\n        title: \"Experiment\",\n        prefix: \"$\"\n      },\n      axisY: {\n        title: \"Amount of Inputs\",\n        prefix: \"$\"\n      }, \n      toolTip: {\n        shared: true\n      },\n      data: [],\n      options: {}\n    };\n\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  updateTitle(output) {\n    return output + \" Chart\";\n  }\n\n  compare(a, b) {\n    return b[1] - a[1];\n  }\n\n  sortData(output) {\n    let sorted = [];\n    for (let exp in this.state.dataset) {\n      sorted.push([exp, this.state.dataset[exp][\"outputs\"][output]]);\n    }\n    sorted.sort(this.compare);\n    console.log(\"sortData\", sorted);\n    return sorted;\n  }\n\n  createDataPoints(input, output) {\n    let sortedDataPoints = [];\n    for (let exp of this.sortData(output)) {\n      sortedDataPoints.push({\n        x: exp[0],\n        y: this.state.dataset[exp[0]][\"inputs\"][input]\n      })\n    }\n    console.log(\"createDataPoints\", sortedDataPoints)\n    return {\n      type: \"stackedBar\",\n      name: input,\n      showInLegend: \"true\",\n      xValueFormatString: \"$#,##0\",\n      yValueFormatString: \"$#,##0\",\n      dataPoints: sortedDataPoints\n    };\n  }\n\n  updateData(output) {\n    console.log(\"updating data\");\n    let newData = [];\n    for (let input of this.state.inputs) {\n      newData.push(this.createDataPoints(input, output));\n    }\n    console.log(\"updateData\", newData);\n    this.setState({ data: newData });\n\n    return newData;\n  }\n\n  toggleDataSeries(e) {\n\t\tif(typeof(e.dataSeries.visible) === \"undefined\" || e.dataSeries.visible) {\n\t\t\te.dataSeries.visible = false;\n\t\t}\n\t\telse {\n\t\t\te.dataSeries.visible = true;\n\t\t}\n\t\tthis.chart.render();\n\t}\n\n  updateOptions(output) {\n    let newTitle = this.updateTitle(output);\n    let newData = this.updateData(output);\n    this.setState({ \n      options: {\n        animationEnabled: true,\n\t\t\t  theme: \"light2\",\n        title: {\n          text: newTitle,\n        },\n        axisX: {\n          title: \"Experiment\",\n          prefix: \"$\"\n        },\n        axisY: {\n          title: \"Amount of Inputs\",\n          prefix: \"$\"\n        }, \n        toolTip: {\n          shared: true\n        },\n        legend:{\n          cursor: \"pointer\",\n          itemclick: this.toggleDataSeries\n        },\n        // data: newData\n      // } \n      // options: {\n      //   animationEnabled: true,\n      //   theme: \"light2\",\n      //   title:{\n      //     text: \"Evening Sales in a Restaurant\"\n      //   },\n      //   axisX: {\n      //     valueFormatString: \"DDD\"\n      //   },\n      //   axisY: {\n      //     prefix: \"$\"\n      //   },\n      //   toolTip: {\n      //     shared: true\n      //   },\n      //   legend:{\n      //     cursor: \"pointer\",\n      //     itemclick: this.toggleDataSeries\n      //   },\n        data: [{\n          type: \"stackedBar\",\n          name: \"Meals\",\n          showInLegend: \"true\",\n          xValueFormatString: \"DD, MMM\",\n          yValueFormatString: \"$#,##0\",\n          dataPoints: [\n            { x: \"20170111_EXP_12\", y: 1 },\n            { x: \"20170111_EXP_12\", y: 1 },\n            { x: \"20170111_EXP_12\", y: 1 },\n            { x: \"20170111_EXP_12\", y: 1 },\n            { x: \"20170111_EXP_12\", y: 1 },\n            { x: \"20170111_EXP_12\", y: 1 },\n          ]\n        // },\n        // {\n        //   type: \"stackedBar\",\n        //   name: \"Snacks\",\n        //   showInLegend: \"true\",\n        //   xValueFormatString: \"DD, MMM\",\n        //   yValueFormatString: \"$#,##0\",\n        //   dataPoints: [\n        //     { x: new Date(2018, 5, 25), y: 86 },\n        //     { x: new Date(2018, 5, 26), y: 95 },\n        //     { x: new Date(2018, 5, 27), y: 71 },\n        //     { x: new Date(2018, 5, 28), y: 58 },\n        //     { x: new Date(2018, 5, 29), y: 60 },\n        //     { x: new Date(2018, 5, 30), y: 65 },\n        //     { x: new Date(2018, 6, 1), y: 89 }\n        //   ]\n        // },\n        // {\n        //   type: \"stackedBar\",\n        //   name: \"Drinks\",\n        //   showInLegend: \"true\",\n        //   xValueFormatString: \"DD, MMM\",\n        //   yValueFormatString: \"$#,##0\",\n        //   dataPoints: [\n        //     { x: new Date(2018, 5, 25), y: 48 },\n        //     { x: new Date(2018, 5, 26), y: 45 },\n        //     { x: new Date(2018, 5, 27), y: 41 },\n        //     { x: new Date(2018, 5, 28), y: 55 },\n        //     { x: new Date(2018, 5, 29), y: 80 },\n        //     { x: new Date(2018, 5, 30), y: 85 },\n        //     { x: new Date(2018, 6, 1), y: 83 }\n        //   ]\n        // },\n        // {\n        //   type: \"stackedBar\",\n        //   name: \"Dessert\",\n        //   showInLegend: \"true\",\n        //   xValueFormatString: \"DD, MMM\",\n        //   yValueFormatString: \"$#,##0\",\n        //   dataPoints: [\n        //     { x: new Date(2018, 5, 25), y: 61 },\n        //     { x: new Date(2018, 5, 26), y: 55 },\n        //     { x: new Date(2018, 5, 27), y: 61 },\n        //     { x: new Date(2018, 5, 28), y: 75 },\n        //     { x: new Date(2018, 5, 29), y: 80 },\n        //     { x: new Date(2018, 5, 30), y: 85 },\n        //     { x: new Date(2018, 6, 1), y: 105 }\n        //   ]\n        // },\n        // {\n        //   type: \"stackedBar\",\n        //   name: \"Takeaway\",\n        //   showInLegend: \"true\",\n        //   xValueFormatString: \"DD, MMM\",\n        //   yValueFormatString: \"$#,##0\",\n        //   dataPoints: [\n        //     { x: new Date(2018, 5, 25), y: 52 },\n        //     { x: new Date(2018, 5, 26), y: 55 },\n        //     { x: new Date(2018, 5, 27), y: 20 },\n        //     { x: new Date(2018, 5, 28), y: 35 },\n        //     { x: new Date(2018, 5, 29), y: 30 },\n        //     { x: new Date(2018, 5, 30), y: 45 },\n        //     { x: new Date(2018, 6, 1), y: 25 }\n        //   ]\n        }]\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"options\", this.state.options);\n  }\n\n  render() {\n    return (\n      <div className=\"chart\">\n        <button onClick={() => this.updateOptions(\"Viscosity\")}>Viscosity</button>\n        <button onClick={() => this.updateOptions(\"Cure Time\")}>Cure Time</button>\n        <button onClick={() => this.updateOptions(\"Elongation\")}>Elongation</button>\n        <button onClick={() => this.updateOptions(\"Tensile Strength\")}>Tensile Strength</button>\n        <button onClick={() => this.updateOptions(\"Compression Set\")}>Compression Set</button>\n        <CanvasJSChart options = { this.state.options } />\n      </div>\n    )\n  }\n}\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}