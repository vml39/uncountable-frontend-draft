{"ast":null,"code":"var _jsxFileName = \"/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js\";\nimport React from 'react';\nimport dataset from '../assets/dataset.json';\nimport * as CanvasJSReact from '../assets/canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataset: dataset,\n      inputs: [\"Polymer 1\", \"Polymer 2\", \"Polymer 3\", \"Polymer 4\", \"Carbon Black High Grade\", \"Carbon Black Low Grade\", \"Silica Filler 1\", \"Silica Filler 2\", \"Plasticizer 1\", \"Plasticizer 2\", \"Plasticizer 3\", \"Antioxidant\", \"Coloring Pigment\", \"Co-Agent 1\", \"Co-Agent 2\", \"Co-Agent 3\", \"Curing Agent 1\", \"Curing Agent 2\", \"Oven Temperature\"],\n      title: \"Filler Title\",\n      axisX: {\n        title: \"Experiment\"\n      },\n      axisY: {\n        title: \"Amount of Inputs\"\n      },\n      toolTip: {\n        shared: true\n      },\n      options: {}\n    };\n  }\n\n  updateTitle(output) {\n    console.log(\"updating title\");\n    let newTitle = output + \" Chart\";\n    this.setState({\n      title: newTitle\n    });\n  }\n\n  compare(a, b) {\n    return b[1] - a[1];\n  }\n\n  sortData(output) {\n    // sort by descending based on the output for this \n    // sort by exp name in an array\n    let sorted = [];\n\n    for (let exp in this.state.dataset) {\n      sorted.push([exp, this.state.dataset[exp][\"outputs\"][output]]);\n    }\n\n    sorted.sort(this.compare);\n    console.log(\"sortData\", sorted);\n    return sorted;\n  }\n\n  createDataPoints(input, output) {\n    let sortedDataPoints = [];\n\n    for (let exp in this.sortData(output)) {\n      console.log(exp);\n      sortedDataPoints.push({\n        x: exp[0],\n        y: this.state.dataset[exp[0]][\"inputs\"][input]\n      });\n    }\n\n    console.log(\"createDataPoints\", sortedDataPoints);\n    return {\n      type: \"stackedBar\",\n      name: input,\n      dataPoints: sortedDataPoints\n    };\n  }\n\n  updateData(output) {\n    console.log(\"updating data\");\n    let newData = [];\n\n    for (let input of this.state.inputs) {\n      newData.push(this.createDataPoints(input, output));\n    }\n\n    console.log(\"updateData\", newData);\n    this.setState({\n      data: newData\n    });\n  }\n\n  updateOptions(output) {\n    this.updateTitle(output);\n    this.updateData(output);\n    this.setState({\n      options: {\n        title: this.state.title,\n        axisX: this.state.axisX,\n        axisY: this.state.axisY,\n        toolTip: this.state.toolTip,\n        data: this.state.data\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Viscosity\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Viscosity\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Cure Time\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Cure Time\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Elongation\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Elongation\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Tensile Strength\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Tensile Strength\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Compression Set\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Compression Set\"), React.createElement(CanvasJSChart, {\n      options: this.state.options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js"],"names":["React","dataset","CanvasJSReact","CanvasJS","CanvasJSChart","Chart","Component","constructor","props","state","inputs","title","axisX","axisY","toolTip","shared","options","updateTitle","output","console","log","newTitle","setState","compare","a","b","sortData","sorted","exp","push","sort","createDataPoints","input","sortedDataPoints","x","y","type","name","dataPoints","updateData","newData","data","updateOptions","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dataset from '../assets/dataset.json';\nimport * as CanvasJSReact from '../assets/canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataset: dataset,\n      inputs: [\n        \"Polymer 1\",\n        \"Polymer 2\",\n        \"Polymer 3\",\n        \"Polymer 4\",\n        \"Carbon Black High Grade\",\n        \"Carbon Black Low Grade\",\n        \"Silica Filler 1\",\n        \"Silica Filler 2\",\n        \"Plasticizer 1\",\n        \"Plasticizer 2\",\n        \"Plasticizer 3\",\n        \"Antioxidant\",\n        \"Coloring Pigment\",\n        \"Co-Agent 1\",\n        \"Co-Agent 2\",\n        \"Co-Agent 3\",\n        \"Curing Agent 1\",\n        \"Curing Agent 2\",\n        \"Oven Temperature\"\n      ],\n      title: \"Filler Title\",\n      axisX: {\n        title: \"Experiment\"\n      },\n      axisY: {\n        title: \"Amount of Inputs\"\n      }, \n      toolTip: {\n        shared: true\n      },\n      options: {}\n    };\n  }\n\n  updateTitle(output) {\n    console.log(\"updating title\");\n    let newTitle = output + \" Chart\";\n    this.setState({title: newTitle});\n  }\n\n  compare(a, b) {\n    return b[1] - a[1];\n  }\n\n  sortData(output) {\n    // sort by descending based on the output for this \n    // sort by exp name in an array\n    let sorted = [];\n    for (let exp in this.state.dataset) {\n      sorted.push([exp, this.state.dataset[exp][\"outputs\"][output]]);\n    }\n    sorted.sort(this.compare);\n    console.log(\"sortData\", sorted);\n    return sorted;\n  }\n\n  createDataPoints(input, output) {\n    let sortedDataPoints = [];\n    for (let exp in this.sortData(output)) {\n      console.log(exp);\n      sortedDataPoints.push({\n        x: exp[0],\n        y: this.state.dataset[exp[0]][\"inputs\"][input]\n      })\n    }\n    console.log(\"createDataPoints\", sortedDataPoints)\n    return {\n      type: \"stackedBar\",\n      name: input,\n      dataPoints: sortedDataPoints\n    };\n  }\n\n  updateData(output) {\n    console.log(\"updating data\");\n    let newData = [];\n    for (let input of this.state.inputs) {\n      newData.push(this.createDataPoints(input, output));\n    }\n    console.log(\"updateData\", newData);\n    this.setState({ data: newData });\n  }\n\n  updateOptions(output) {\n    this.updateTitle(output);\n    this.updateData(output);\n    this.setState({ \n      options: {\n        title: this.state.title,\n        axisX: this.state.axisX,\n        axisY: this.state.axisY,\n        toolTip: this.state.toolTip,\n        data: this.state.data\n      } \n    })\n  }\n\n  render() {\n    return (\n      <div className=\"chart\">\n        <button onClick={() => this.updateOptions(\"Viscosity\")}>Viscosity</button>\n        <button onClick={() => this.updateOptions(\"Cure Time\")}>Cure Time</button>\n        <button onClick={() => this.updateOptions(\"Elongation\")}>Elongation</button>\n        <button onClick={() => this.updateOptions(\"Tensile Strength\")}>Tensile Strength</button>\n        <button onClick={() => this.updateOptions(\"Compression Set\")}>Compression Set</button>\n        <CanvasJSChart options = { this.state.options } />\n      </div>\n    )\n  }\n}\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}