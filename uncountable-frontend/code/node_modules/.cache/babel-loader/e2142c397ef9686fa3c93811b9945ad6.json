{"ast":null,"code":"var _jsxFileName = \"/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js\";\nimport React from 'react';\nimport dataset from '../assets/dataset.json';\nimport * as CanvasJSReact from '../assets/canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nconst inputs = [\"Polymer 1\", \"Polymer 2\", \"Polymer 3\", \"Polymer 4\", \"Carbon Black High Grade\", \"Carbon Black Low Grade\", \"Silica Filler 1\", \"Silica Filler 2\", \"Plasticizer 1\", \"Plasticizer 2\", \"Plasticizer 3\", \"Antioxidant\", \"Coloring Pigment\", \"Co-Agent 1\", \"Co-Agent 2\", \"Co-Agent 3\", \"Curing Agent 1\", \"Curing Agent 2\" // Oven Temperature included in the tooltip but not in the stacked bar chart\n];\nlet indexCount = 0;\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      options: {},\n      indexLabelCount: 0\n    };\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  updateTitle(output) {\n    let newTitle = output + \" Chart\";\n    this.setState({\n      title: newTitle\n    });\n  }\n\n  compare(a, b) {\n    return b[1] - a[1];\n  }\n\n  sortData(output) {\n    let sorted = [];\n\n    for (let exp in dataset) {\n      sorted.push([exp, dataset[exp][\"outputs\"][output]]);\n    }\n\n    sorted.sort(this.compare);\n    console.log(\"sortData\", sorted);\n    return sorted;\n  }\n\n  createIndexLabel(e) {\n    if (indexCount < 425) {\n      indexCount++;\n      console.log(indexCount);\n      return \"\";\n    } else {\n      indexCount++;\n      console.log(indexCount);\n      console.log(e.dataPoint.label);\n      return e.dataPoint.label;\n    }\n  }\n\n  createDataPoints(input, output) {\n    let sortedDataPoints = [];\n    let sorted = this.sortData(output);\n\n    for (let exp of sorted) {\n      sortedDataPoints.push({\n        label: exp[0],\n        y: dataset[exp[0]][\"inputs\"][input]\n      });\n    }\n\n    console.log(\"createDataPoints\", sortedDataPoints);\n    return {\n      type: \"stackedBar\",\n      name: input,\n      showInLegend: \"true\",\n      indexLabel: \"hi\",\n      indexLabelFormatter: e => {\n        this.createIndexLabel(e);\n      },\n      indexLabelPlacement: \"outside\",\n      indexLabelOrientation: \"horizontal\",\n      dataPoints: sortedDataPoints\n    };\n  }\n\n  updateData(output) {\n    console.log(\"updating data\");\n    let newData = [];\n\n    for (let input of inputs) {\n      newData.push(this.createDataPoints(input, output));\n    }\n\n    console.log(\"updateData\", newData);\n    this.setState({\n      data: newData\n    });\n    return newData;\n  }\n\n  toggleDataSeries(e) {\n    if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n      e.dataSeries.visible = false;\n    } else {\n      e.dataSeries.visible = true;\n    }\n\n    this.chart.render();\n  }\n\n  updateOptions(output) {\n    this.updateTitle(output);\n    let newData = this.updateData(output);\n    this.setState({\n      options: {\n        animationEnabled: true,\n        exportEnabled: true,\n        theme: \"light2\",\n        height: 600,\n        axisX: {\n          title: \"Experiment\",\n          titleFontSize: 24,\n          labelFontSize: 12,\n          labelFormatter: e => {\n            this.createIndexLabel(e);\n          },\n          interval: 1\n        },\n        axisY: {\n          title: \"Amount of Inputs\",\n          titleFontSize: 24,\n          labelFontSize: 12\n        },\n        toolTip: {\n          shared: true,\n          contentFormatter: e => {\n            let exp = e.entries[0].dataPoint.label;\n            let content = \"<i>\" + exp + \"</i>\" + \"<br/>\";\n\n            for (let i = 0; i < e.entries.length; i++) {\n              content += e.entries[i].dataSeries.name + \": \" + \"<strong>\" + e.entries[i].dataPoint.y + \"</strong>\";\n              content += \"<br/>\";\n            }\n\n            content += \"Oven Temperature: <strong>\" + dataset[exp][\"inputs\"][\"Oven Temperature\"] + \"</strong>\";\n            return content;\n          }\n        },\n        legend: {\n          cursor: \"pointer\",\n          fontSize: 12,\n          itemclick: this.toggleDataSeries\n        },\n        data: newData\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.updateOptions(\"Viscosity\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, this.state.title)), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Viscosity\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Viscosity\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Cure Time\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Cure Time\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Elongation\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"Elongation\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Tensile Strength\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Tensile Strength\"), React.createElement(\"button\", {\n      onClick: () => this.updateOptions(\"Compression Set\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Compression Set\"), React.createElement(\"div\", {\n      id: \"chartContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(CanvasJSChart, {\n      options: this.state.options,\n      onRef: ref => this.chart = ref,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/vivian/Desktop/uncountable-frontend/uncountable-frontend/src/components/Chart.js"],"names":["React","dataset","CanvasJSReact","CanvasJS","CanvasJSChart","inputs","indexCount","Chart","Component","constructor","props","state","title","options","indexLabelCount","toggleDataSeries","bind","updateTitle","output","newTitle","setState","compare","a","b","sortData","sorted","exp","push","sort","console","log","createIndexLabel","e","dataPoint","label","createDataPoints","input","sortedDataPoints","y","type","name","showInLegend","indexLabel","indexLabelFormatter","indexLabelPlacement","indexLabelOrientation","dataPoints","updateData","newData","data","dataSeries","visible","chart","render","updateOptions","animationEnabled","exportEnabled","theme","height","axisX","titleFontSize","labelFontSize","labelFormatter","interval","axisY","toolTip","shared","contentFormatter","entries","content","i","length","legend","cursor","fontSize","itemclick","componentDidMount","ref"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dataset from '../assets/dataset.json';\nimport * as CanvasJSReact from '../assets/canvasjs.react';\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nconst inputs = [\n  \"Polymer 1\",\n  \"Polymer 2\",\n  \"Polymer 3\",\n  \"Polymer 4\",\n  \"Carbon Black High Grade\",\n  \"Carbon Black Low Grade\",\n  \"Silica Filler 1\",\n  \"Silica Filler 2\",\n  \"Plasticizer 1\",\n  \"Plasticizer 2\",\n  \"Plasticizer 3\",\n  \"Antioxidant\",\n  \"Coloring Pigment\",\n  \"Co-Agent 1\",\n  \"Co-Agent 2\",\n  \"Co-Agent 3\",\n  \"Curing Agent 1\",\n  \"Curing Agent 2\",\n  // Oven Temperature included in the tooltip but not in the stacked bar chart\n]\n\nlet indexCount = 0;\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      options: {},\n      indexLabelCount: 0\n    };\n\n    this.toggleDataSeries = this.toggleDataSeries.bind(this);\n  }\n\n  updateTitle(output) {\n    let newTitle = output + \" Chart\";\n    this.setState({ title: newTitle });\n  }\n\n  compare(a, b) {\n    return b[1] - a[1];\n  }\n\n  sortData(output) {\n    let sorted = [];\n    for (let exp in dataset) {\n      sorted.push([exp, dataset[exp][\"outputs\"][output]]);\n    }\n    sorted.sort(this.compare);\n    console.log(\"sortData\", sorted);\n    return sorted;\n  }\n\n  createIndexLabel(e) {\n    if (indexCount < 425) {\n      indexCount++;\n      console.log(indexCount);\n      return \"\";\n    } else {\n      indexCount++;\n      console.log(indexCount);\n      console.log(e.dataPoint.label);\n      return e.dataPoint.label;\n    }\n  }\n\n  createDataPoints(input, output) {\n    let sortedDataPoints = [];\n    let sorted = this.sortData(output);\n    for (let exp of sorted) {\n      sortedDataPoints.push({\n        label: exp[0],\n        y: dataset[exp[0]][\"inputs\"][input]\n      })\n    }\n    console.log(\"createDataPoints\", sortedDataPoints);\n    return {\n      type: \"stackedBar\",\n      name: input,\n      showInLegend: \"true\",\n      indexLabel: \"hi\",\n      indexLabelFormatter: e => {\n        this.createIndexLabel(e);\n      },\n      indexLabelPlacement: \"outside\",  \n      indexLabelOrientation: \"horizontal\",\n      dataPoints: sortedDataPoints\n    };\n  }\n\n  updateData(output) {\n    console.log(\"updating data\");\n    let newData = [];\n    for (let input of inputs) {\n      newData.push(this.createDataPoints(input, output));\n    }\n    console.log(\"updateData\", newData);\n    this.setState({ data: newData });\n\n    return newData;\n  }\n\n  toggleDataSeries(e) {\n\t\tif(typeof(e.dataSeries.visible) === \"undefined\" || e.dataSeries.visible) {\n\t\t\te.dataSeries.visible = false;\n\t\t}\n\t\telse {\n\t\t\te.dataSeries.visible = true;\n\t\t}\n\t\tthis.chart.render();\n\t}\n\n  updateOptions(output) {\n    this.updateTitle(output);\n    let newData = this.updateData(output);\n    this.setState({ \n      options: {\n        animationEnabled: true,\n        exportEnabled: true,\n        theme: \"light2\",\n        height: 600,\n        axisX: {\n          title: \"Experiment\",\n          titleFontSize: 24,\n          labelFontSize: 12,\n          labelFormatter: e => {\n            this.createIndexLabel(e);\n          },\n          interval: 1,\n        },\n        axisY: {\n          title: \"Amount of Inputs\",\n          titleFontSize: 24,\n          labelFontSize: 12,\n        }, \n        toolTip: {\n          shared: true,\n          contentFormatter: e => {\n            let exp = e.entries[0].dataPoint.label;\n            let content = \"<i>\" + exp + \"</i>\" + \"<br/>\";\n            for (let i = 0; i < e.entries.length; i++) {\n              content += e.entries[i].dataSeries.name + \": \" + \"<strong>\" + e.entries[i].dataPoint.y + \"</strong>\";\n              content += \"<br/>\";\n            }\n            content += \"Oven Temperature: <strong>\" + dataset[exp][\"inputs\"][\"Oven Temperature\"] + \"</strong>\";\n            return content;\n          }\n        },\n        legend:{\n          cursor: \"pointer\",\n          fontSize: 12,\n          itemclick: this.toggleDataSeries\n        },\n        data: newData\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.updateOptions(\"Viscosity\");\n  }\n\n  render() {\n    return (\n      <div className=\"chart\">\n        <header>\n          <h1>{ this.state.title }</h1>\n        </header>\n        <button onClick={() => this.updateOptions(\"Viscosity\")}>Viscosity</button>\n        <button onClick={() => this.updateOptions(\"Cure Time\")}>Cure Time</button>\n        <button onClick={() => this.updateOptions(\"Elongation\")}>Elongation</button>\n        <button onClick={() => this.updateOptions(\"Tensile Strength\")}>Tensile Strength</button>\n        <button onClick={() => this.updateOptions(\"Compression Set\")}>Compression Set</button>\n        <div id=\"chartContainer\">\n          <CanvasJSChart options={ this.state.options } onRef={ref => this.chart = ref} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}